package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_ns_archive",
     "ocamllex",
     "ocaml_module",
     "ocaml_signature",
     "ocamlyacc",
)

DEPS_1 = [
    "@ocaml//bigarray",
    "@parsexp//lib/parsexp",
    "@sexplib0//lib/sexplib0"
]

############################# Aggregates #############################
ocaml_ns_archive(
    name       = "sexplib",
    ns_name    = "sexplib",
    manifest = [
        ":Conv",
        ":Conv_error",
        ":Exn_magic",
        ":Lexer",
        ":Parser",
        ":Parser_with_layout",
        ":Path",
        ":Pre_sexp",
        ":Sexp",
        ":Sexp_grammar",
        ":Sexp_grammar_intf",
        ":Sexp_intf",
        ":Sexp_with_layout",
        ":Src_pos",
        ":Std",
        ":Type",
        ":Type_with_layout"
    ],
)

######################## Modules & Signatures ########################
ocaml_signature(
    name          = "Conv_cmi",
    src           = "conv.mli",
    deps          = DEPS_1 + [
        ":Sexp_cmi"
    ],
)

ocaml_module(
    name          = "Conv",
    struct        = "conv.ml",
    sig           = ":Conv_cmi",
    deps          = DEPS_1 + [
        ":Sexp"
    ],
)

ocaml_signature(
    name          = "Exn_magic_cmi",
    src           = "exn_magic.mli",
    deps          = DEPS_1 + [
        ":Sexp_cmi"
    ],
)

ocaml_module(
    name          = "Exn_magic",
    struct        = "exn_magic.ml",
    sig           = ":Exn_magic_cmi",
    deps          = DEPS_1 + [
        ":Conv",
        ":Sexp"
    ],
)

ocaml_signature(
    name          = "Lexer_cmi",
    src           = "lexer.mli",
    deps          = DEPS_1 + [
        ":Parser_cmi",
        ":Parser_with_layout_cmi"
    ],
)

ocaml_module(
    name          = "Lexer",
    struct        = "lexer.ml",
    sig           = ":Lexer_cmi",
    deps          = DEPS_1 + [
        ":Parser_cmi",
        ":Parser_with_layout_cmi"
    ],
)

ocaml_signature(
    name          = "Parser_cmi",
    src           = "parser.mli",
    deps          = [":Type"]
)

ocaml_module(
    name          = "Parser",
    struct        = "parser.ml",
    sig           = ":Parser_cmi",
    deps          = DEPS_1 + [
        ":Type"
    ],
)

ocaml_signature(
    name          = "Parser_with_layout_cmi",
    src           = "parser_with_layout.mli",
    deps          = DEPS_1 + [
        # ":Sexp_cmi"
        ":Type_with_layout_cmi"
    ],
)

ocaml_module(
    name          = "Parser_with_layout",
    struct        = "parser_with_layout.ml",
    sig           = ":Parser_with_layout_cmi",
    deps          = DEPS_1 + [
        ":Src_pos",
        ":Type_with_layout"
    ],
)

ocaml_signature(
    name          = "Path_cmi",
    src           = "path.mli",
    deps          = DEPS_1 + [
        ":Sexp_cmi"
    ],
)

ocaml_module(
    name          = "Path",
    struct        = "path.ml",
    sig           = ":Path_cmi",
    deps          = DEPS_1 + [
        ":Sexp"
    ],
)

ocaml_signature(
    name          = "Sexp_cmi",
    src           = "sexp.mli",
    deps          = DEPS_1 + [
        ":Sexp_intf"
    ],
)

ocaml_module(
    name          = "Sexp",
    struct        = "sexp.ml",
    sig           = ":Sexp_cmi",
    deps          = DEPS_1 + [
        ":Pre_sexp",
        ":Sexp_with_layout",
        ":Sexp_intf"
    ],
)

ocaml_signature(
    name          = "Sexp_grammar_cmi",
    src           = "sexp_grammar.mli",
    deps          = DEPS_1 + [
        ":Sexp_grammar_intf"
    ],
)

ocaml_module(
    name          = "Sexp_grammar",
    struct        = "sexp_grammar.ml",
    sig           = ":Sexp_grammar_cmi",
    deps          = DEPS_1 + [
        ":Sexp_grammar_intf"
    ],
)

ocaml_signature(
    name          = "Src_pos_cmi",
    src           = "src_pos.mli",
    deps          = DEPS_1 + [
        ":Type"
    ],
)

ocaml_module(
    name          = "Src_pos",
    struct        = "src_pos.ml",
    sig           = ":Src_pos_cmi",
    deps          = DEPS_1 + [
        ":Type"
    ],
)

ocaml_module(
    name          = "Conv_error",
    struct        = "conv_error.ml",
    deps          = DEPS_1,
)

ocaml_module(
    name          = "Pre_sexp",
    struct        = "pre_sexp.ml",
    deps          = DEPS_1 + [
        ":Lexer",
        ":Parser",
        ":Type"
    ],
)

ocaml_module(
    name          = "Sexp_grammar_intf",
    struct        = "sexp_grammar_intf.ml",
    deps          = DEPS_1 + [
        ":Sexp"
    ],
)

ocaml_module(
    name          = "Sexp_intf",
    struct        = "sexp_intf.ml",
    deps          = DEPS_1 + [
        ":Pre_sexp",
        # ":Src_pos",
        ":Type",
        ":Type_with_layout"
    ],
)

ocaml_module(
    name          = "Sexp_with_layout",
    struct        = "sexp_with_layout.ml",
    deps          = DEPS_1 + [
        ":Lexer",
        ":Parser_with_layout",
        ":Pre_sexp",
        ":Src_pos",
        ":Type",
        ":Type_with_layout"
    ],
)

ocaml_module(
    name          = "Std",
    struct        = "std.ml",
    deps          = DEPS_1 + [
        ":Conv"
    ],
)

ocaml_module(
    name          = "Type",
    struct        = "type.ml",
    deps          = DEPS_1,
)

ocaml_signature(
    name          = "Type_with_layout_cmi",
    src           = "type_with_layout.mli",
    deps          = DEPS_1 + [
        ":Src_pos_cmi",
        ":Type"
    ],
)

ocaml_module(
    name          = "Type_with_layout",
    struct        = "type_with_layout.ml",
    sig           = ":Type_with_layout_cmi",
    deps          = DEPS_1 + [
        ":Src_pos",
        ":Type"
    ],
)

########################
####  File Generators  ####

##########
ocamllex(
    name  = "lex_Lexer",
    src   = "lexer.mll",
    out   = "lexer.ml",
)
##########
ocamlyacc(
    name  = "yacc_Parser_with_layout",
    src   = "parser_with_layout.mly",
    outs  = ["parser_with_layout.ml", "parser_with_layout.mli"]
)
##########
ocamlyacc(
    name  = "yacc_Parser",
    src   = "parser.mly",
    outs  = ["parser.ml", "parser.mli"]
)
